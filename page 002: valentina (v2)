<!DOCTYPE html>

<!-- PAGE 002: VALENTINA (v2, with pics) by CODESBYANA
	
	- CREDITS: codesbyana.tumblr.com/credits
	- TERMS OF USE: codesbyana.tumblr.com/terms
	
	THANK YOU FOR USING! ♡

 -->
 
<html lang="en" data-theme="light">
<head> 

	<title> ana's characters </title>
	<link rel="shortcut icon" href="{Favicon}">

	<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- SCRIPTS -->

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<!--HANDLEBARS.JS--> 
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.6/handlebars.min.js"></script> 
            
<!--PAGE SETTINGS--> 
<script> 

/*TO GET THE SHEET ID: 
1. Go to your spreadsheet > File > Publish to web. 
2. Click on "Entire Document" and select the speficic sheet (in the example it is called "MAIN") > publish, ignore the URL. 
3. File > Share > Anyone with link can share. This URL is important. 
4. Copy the following string from the URL and paste it in sheetID: 

Example: 
            
https://docs.google.com/spreadsheets/d/ 
  → 1jKi9Knw7e5qr4bXr_zQib8FwpGM7E6eqRx1tH3JruIA ← 
/edit?usp=sharing

TO GET API KEY:
    1. Go to https://console.cloud.google.com/projectselector2/apis/dashboard 
    (of the account the sheet is under)
    2. Create new project
    3. Create credentials, choose API key (copy this)
    4. Restrict application access to HTTP referrer and add the wildcard yoururl.tumblr.com/* (or for multipe sites if needed)
    5. Libraries > search for Google Sheets > Enable*/
    
const sheetID = '1sqzuukq2ROr4nYVRzl0UcE5M3QYw3ed6GuCBvqDLt7Y';
const sheetTab = 'DATA';
const APIkey = 'AIzaSyCYHaTKFQqvTlXrn8JwI9hDgbtR46gGRxU';

</script> 

<!--GOOGLE SHEETS INTEGRATION--> 
<script type="text/javascript" src="https://cdn.jsdelivr.net/gh/n0nspace/tumblr-sheets@main/nnspc-sheets.min.js"></script>


<!-- ISOTOPE FILTERING -->
<script src="https://unpkg.com/isotope-layout@3/dist/isotope.pkgd.min.js"></script>
<script src="https://static.tumblr.com/p0knose/FpAp5c11c/magnusthemes.combofilters.js"></script>

<!-- MASONRY LAYOUT -->
<script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js"></script>

<!---- TOOLTIPS ---->
<script src="https://unpkg.com/popper.js@1"></script>
<script src="https://unpkg.com/tippy.js@5/dist/tippy-bundle.iife.js"></script>

<!-- FONTS: GOOGLE FONTS AND ICON FONTS -->
<script src="https://unpkg.com/@phosphor-icons/web"></script>

<!-- DARK/LIGHT BUTTON -->
<script>

const storedTheme = localStorage.getItem("theme") || (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");
    if (storedTheme) {
      document.documentElement.setAttribute("data-theme", storedTheme); 
    }

</script>

<link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap" rel="stylesheet">
	
<style type="text/css">

/*----- BASICS -----*/

* { 
    margin: 0 ; 
	padding: 0 ; 
	box-sizing: border-box; 
}

:root {
 	--MuseBoxWidth: 360px; /* muse box width */
 	
 	
 	--BorderRadius: 5px;  

    --FontSize: 13px;
    --MuseIconSize: 20px;
    --FontBody: 'Poppins', sans-serif;
    --FontAccent: 'Poppins', sans-serif;
    
}
    /* DARK/LIGHT MODE */

:root, html[data-theme='light'] {
    --light-on: flex;
    --light-off: none;
    --tumblr-controls: invert(100%) hue-rotate(180deg);
    
    --Glow: 0 0 10px; /* change the last value to 0 if you don't want the glow effect */
    
    --ColorText: #333;
    --ColorBackground: #f2f2f2; /* main bg */
    --ColorBackground2: #fafafa; /* header + muse boxes bg */
    --ColorBorder: #dddddd;
    --ColorStatsIcons: #ed2e00;
    --ColorLinks: #777777; /* top bar + scroll to top + credit links */
    --ColorLinksHover: #ed2e00;
    --ColorMuseLinks: #ed2e00; /* muses boxes links */
    --ColorMuseLinksHover: #f7c1cf;
    --ColorAccent1: #ed2e00;
    
    --ColorGradient1: #ffcd1f;
    --ColorGradient2: #ed2e00; /* if you want a solid color instead of a gradient, use same colors in both variables */
}

html[data-theme='dark'] {
    --light-on: none;
    --light-off: flex;
    --tumblr-controls: invert(0%);
    
    --Glow: 0 0 10px; /* change the last value to 0 if you don't want the glow effect */
    
    --ColorText: #eeeeee;
    --ColorBackground: #111111; /* main bg */
    --ColorBackground2: #202020; /* header + muse boxes bg */
    --ColorBorder: #505050;
    --ColorStatsIcons: #ffcd1f;
    --ColorLinks: #fff; /* top bar + scroll to top + credit links */
    --ColorLinksHover: #ffcd1f;
    --ColorMuseLinks: #ffcd1f; /* muses boxes links */
    --ColorMuseLinksHover: #ed2e00;
    --ColorAccent1: #ffcd1f;
    
    --ColorGradient1: #ed2e00;
    --ColorGradient2: #ffcd1f; /* if you want a solid color instead of a gradient, use same colors in both variables */
}

html.theme-transition,
html.theme-transition *,
html.theme-transition *:before,
html.theme-transition *:after {
  transition: 0s !important;
  transition-delay: 0 !important;
}

button.theme-toggle, button.tumblr-controls {
    outline: none;
    border: 0; 
    background: transparent;
    padding: 0;
    cursor: pointer;
    color: var(--ColorLinks);
	text-decoration: none;
  	text-shadow:var(--Glow);
}

button.theme-toggle i, button.tumblr-controls i {
	text-decoration: none;
	font-size: 1.7em;
	padding:5px;
}

.light-on {
    display: var(--light-on);
}

.light-off {
    display: var(--light-off); 
}

body {
    display: flex;
    flex-direction: column;
	background: var(--ColorBackground);
	color: var(--ColorText);
	font-size: var(--FontSize);
	font-weight:300;
	font-family: var(--FontBody);
}

a {
	color: var(--ColorLinks);
	-webkit-transition: all 0.5s;
    -moz-transition: all 0.5s;
    -ms-transition: all 0.5s;
    -o-transition: all 0.5s;
    transition: all 0.5s;
}

a:hover {
    text-decoration:none;
	color: var(--ColorLinksHover);
}

b {
    font-weight:500;
}

/*----- TUMBLR CONTROLS -----*/

.tmblr-iframe-compact .tmblr-iframe-unified-controls,
.tmblr-iframe--unified-controls {
   position:fixed;
   margin-top:60px;
   opacity: 0;
   visibility: hidden;
   margin-right:0px;
   z-index:9999999999999999999999999999999999999999!important;
   filter: var(--tumblr-controls);
    
   -webkit-transition: all 0.5s;
    -moz-transition: all 0.5s;
    -ms-transition: all 0.5s;
    -o-transition: all 0.5s;
   -webkit-transform:scale(0.7,0.7);
   -webkit-transform-origin: 100% 0%;
   -ms-transform-origin:100% 0%;
   -ms-transform:scale(0.7,0.7);
   transform:scale(0.7,0.7);
   transform-origin:100% 0%;
}

body.controls-click .tmblr-iframe {
   opacity: 1;
   visibility: visible;
   -webkit-transition: all 0.5s;
   -moz-transition: all 0.5s;
   -ms-transition: all 0.5s;
   -o-transition: all 0.5s;
   transition: all 0.5s;
}

/*----- NO TUMBLR TOPBAR + POPUPS -----*/

.iframe-controls--phone-mobile {display:none!important;}
.tmblr-iframe-pushdown {padding-top:0!important;} 
.tmblr-iframe--app-cta-button {display:none!important;}


/*----- TOOLTIPS -----*/

.tippy-tooltip.custom-theme {
    background-color: var(--ColorBackground);
    color: var(--ColorText);
    border: 1px solid var(--ColorBorder);
    text-align: center;
    padding:2px;
    text-transform: uppercase;
    letter-spacing:.1em;
    font-size: 0.9em;
    border-radius: var(--BorderRadius);
    margin: 5px 0;
}

/*----- SCROLLBAR -----*/

::-webkit-scrollbar {
	width: 5px;
}

::-webkit-scrollbar-track {
	background: transparent;
	border-radius: var(--BorderRadius);
}

::-webkit-scrollbar-thumb {
	background: var(--ColorAccent1);
	border-radius: var(--BorderRadius);
}

/* for firefox */

@-moz-document url-prefix() {
  * {
    scrollbar-width: thin;
    scrollbar-color: var(--ColorAccent1) transparent;
  }
}

/*----- SELECTION -----*/

::selection {
  color: var(--ColorBackground);
  background: var(--ColorAccent1);
}

::-moz-selection {
  color: var(--ColorBackground);
  background: var(--ColorAccent1);
}

/*----- LAYOUT -----*/

header {
    width: 100%;
    background: var(--ColorBackground2);
    border-bottom: 6px solid transparent;
    border-image: linear-gradient(to right, var(--ColorGradient1) 0%, var(--ColorGradient2));
    border-image-slice: 1;
    width:100%;
    position:fixed;
    z-index:9999999999999999999999999;
}

.top-bar {
	display: flex;
	align-items: center;
    width:100%;
	padding:10px 30px;
	
}

#container { margin:15px auto 30px; width:95%;}

#grid {
	margin:0px auto 0px;
	text-align:center;
}

/*----- TOPBAR -----*/

.search {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    font-family: var(--FontAccent);	
	font-size: 1.7em;
	line-height: 1em;
	font-weight: 300;
	text-transform: uppercase;
	letter-spacing:1.5px;
	text-shadow:var(--Glow);
	width:49%;
}

.top-bar > i {
	margin-right:20px;
	font-size: 2em;
	align-items: center;
	text-shadow:var(--Glow);
}

#nav {
	display:flex;
	justify-content: flex-end!important;
	gap: 10px ;
	width:49%;
}	

.nav-link i {
	text-decoration: none;
	font-size: 1.7em;
	padding:5px;
}

.nav-link a {
    display:flex;
	justify-content: center;
  	align-items: center;
	color: var(--ColorLinks);
	text-decoration: none;
  	text-shadow:var(--Glow);
}

#controlsbutton { cursor:pointer; }

.nav-link a, button.theme-toggle a {
    -webkit-transition: 0.5s;
    -moz-transition: 0.5s;
    -ms-transition: 0.5s;
    -o-transition: 0.5s;
    transition: 0.5s;
}

.nav-link a:hover, button.theme-toggle a:hover {
    color:var(--ColorLinksHover);
}

body.controls-click #controlsbutton i { 
    color:var(--ColorLinksHover);
}

/*----- FILTERS -----*/

.filters {
	margin: 70px auto 0px;
	width:80%;
    display: flex;
	flex-flow: row wrap;
	justify-content: center;
	align-items: center;
	align-content: center;
	padding: 10px 20px;
	font-family: var(--FontBody);
}

/* ui group */

.ui-group {
  display: inline-block;
  margin-right: 20px;
  margin-bottom:3px;
}

.ui-group .button-group {
  display: inline-block;
}

.ui-group:last-of-type {
    margin-right:0px;
    margin-bottom:0px;
}

.ui-group b { 
    font-family: var(--FontBody);	
    text-transform:uppercase; 
    display: inline-block;
    vertical-align: baseline;
    margin-right: 5px;
    font-weight:500;
}

/* ---- button ---- */

.button {
	display: inline;
    margin-left:10px;
    padding:3px;
    border: none;
    -webkit-transition: all 0.5s;
    -moz-transition: all 0.5s;
    -ms-transition: all 0.5s;
    -o-transition: all 0.5s;
    transition: all 0.5s;
    font-family: var(--FontBody);
    font-weight:300;
    text-align: center;
    text-decoration:none;
    color: var(--ColorText);
    background-color:transparent;
    list-style:none;
    white-space: nowrap;
}

.button:hover {
  color: var(--ColorLinksHover);
}

.button:active,
.button.is-checked {
	color: var(--ColorAccent1);
}

/* ---- button-group ---- */

.button-group:after {
  content: '';
  display: block;
  clear: both;
}

.button-group .button {
  border-radius: 0;
  margin-left: 0;
  margin-right: 1px;
}

.button-group .button:first-child { border-radius: 0.5em 0 0 0.5em; }
.button-group .button:last-child { border-radius: 0 0.5em 0.5em 0; }

/*----- SEARCH FILTER -----*/

.is-hidden { display: none; }

#searchbox {
    font-size: var(--FontSize);
	font-weight:300;
	font-family: var(--FontBody);
	text-align:left;
	padding-left: 10px;
    background: var(--ColorBackground);
    color:var(--ColorText);
    border: 1px solid var(--ColorBorder);
    border-radius: var(--BorderRadius);
    height:32px;
    width:200px;
}

#searchbox:focus {
  outline: none;
}

#searchbox::-webkit-search-decoration,
#searchbox::-webkit-search-cancel-button,
#searchbox::-webkit-search-results-button,
#searchbox::-webkit-search-results-decoration { display: none; }

/*----- MUSES BOXES -----*/

.grid-item { 
   	border-radius: var(--BorderRadius);
   	background: var(--ColorBackground2);
   	color: var(--ColorText);
   	border: 1px solid var(--ColorBorder);
   	width: var(--MuseBoxWidth);
   	margin-bottom:30px;
}

.muse-box {
    overflow:visible;
}

.muse-box img {
    float:left;
    clear:both;
    width:140px;
    height:180px;
}

.muse-stats {
    max-height:180px;
	overflow-x:hidden!important;
	-ms-overflow-style: none; /* for Internet Explorer, Edge */
    scrollbar-width: none; /* for Firefox */
	text-align:left;
}

.stat {
    border-bottom:1px solid var(--ColorBorder);
    min-height:45.1px!important;
    padding:7px 15px;
    display:flex;
    justify-content:flex-start;
    align-items:center;
}

.stat:last-child {
    border-bottom:none;
}

.stat .ph-light {
    color: var(--ColorStatsIcons);
    padding: 2px;
    margin-right:15px;
    align-items:center;
    font-size: 1.35em;
}

.muse-desc {
	padding: 15px;
	text-transform:lowercase;
	text-align:center;
}

.stat a {
    color: var(--ColorGradient1);
    text-decoration:none;
}

.stat a:hover {
    color: var(--ColorGradient2);
}

.muse-box::-webkit-scrollbar {
    display: none; /* for Chrome, Safari, and Opera */
}

.muse-info {
	padding: 7px 10px;
	border-radius: var(--BorderRadius) var(--BorderRadius) 0 0;
	border-bottom: 1px solid var(--ColorBorder);
}

.muse-name {
    font-family: var(--FontAccent);
	background: var(--ColorAccent1); /* fallback for old browsers */
    background: linear-gradient(to right, var(--ColorGradient1) 0%, var(--ColorGradient2) 100%); 
  -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
	font-weight:500;
	font-size: 1.45em;
	text-transform: lowercase;
	letter-spacing: 1px;
	word-wrap: break-word;
	display: flex;
	flex-direction: row;
	justify-content: center;
	align-items: center;
	align-content: center;
}

.muse-links {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	justify-content: space-evenly;
	border-top:1px solid var(--ColorBorder);
	padding:5px;
}

.muse-links i {
	text-decoration: none;
	padding: 7px;
	display:inline;
}

.muse-links a {
	color: var(--ColorMuseLinks);
	text-decoration: none;
	justify-content: center;
  	align-items: center;
  	font-size: var(--MuseIconSize);
  	text-shadow:var(--Glow);
}

.muse-links a:hover {
	color: var(--ColorMuseLinksHover);
}

/*-----  CREDIT + SCROLL TO TOP -----*/

#totop, #cred {
	position: fixed;
	text-decoration: none;
	z-index: 9999999;
}

#totop {
	bottom: 60px;
	right: 25px;
}

#cred {
	bottom: 25px;
	right: 25px;
}

#totop i, #cred i {
	text-decoration: none;
	font-size: 2em;
	border-radius: var(--BorderRadius);
}

#totop, #cred {
	color: var(--ColorLinks);
	text-decoration: none;
	justify-content: center;
  	align-items: center;
  	text-shadow:var(--Glow);
}

#totop:hover, #cred:hover {
	color: var(--ColorLinksHover)!important;
}

/*----- RESPONSIVENESS -----*/

@media only screen and (max-width: 479px) {

#controlsbutton { display:none; }

#nav { margin-right:none; width:100%; justify-content: center!important; }

.filters {
    display: flex;
    width:90%;
	flex-flow: row wrap;
	justify-content: center;
	align-items: center;
	align-content: center;
	padding: none;
	list-style:none;
	padding: 5px 10px;
	margin-bottom: 10px;
}

.filters .ui-group {
    width:100%;
    text-align:left;
    padding:5px;
	margin-right: 10px;
	display: inline;
	margin-left: none!important;
	margin-right: none!important;
}

.filters .button {
    margin-left: none;
    text-align: center;
}

#totop {
	bottom: 60px;
	right: 15px;
}

#cred {
	bottom: 15px;
	right: 15px;
}

}

@media (max-width: 479px) and (orientation: portrait) {
.top-bar {
    flex-direction:column;
    width:100%;
	padding:10px 30px;
}

.top-bar > i {
    display:none;
}

.search {
    margin: 0px auto 0px;
    width:65%;
}

#searchbox {
    margin-bottom: 5px;
    width:100%;
    text-align: center;
    padding:none;
}

.filters {
    margin: 110px auto 0px;
}

.filters .ui-group {
    margin-bottom:-5px;
}

}


</style>	
	
</head>

<body>

<!-- HEADER -->

<header>	
    
    <div class="top-bar">
    
    <i class="ph-light ph-martini"></i></i>
	
	<div class="search">
	<!-- SEARCH FILTER -->
	<!-- <label for="searchbox">find </label>-->
        <input type="search" id="searchbox" placeholder="search">
    <!-- // SEARCH FILTER -->
    </div>
    

<!-- // NAVIGATION -->

<div id="nav">
  	<div class="nav-link"><a href="/" title="home"><i class="ph-light ph-house"></i></a></div>
	<div class="nav-link"><a href="/ask" title="message"><i class="ph-light ph-chat-circle"></i></a></div>
	<div class="nav-link"><a href="" title="link"><i class="ph-light ph-link"></i></a></div>
	
	<button class="theme-toggle" aria-label="toggle dark or light mode" type="button">
    <a class="light-on" title="dark mode">
        <i class="ph-light ph-moon"></i>
    </a>
    <a class="light-off" title="light mode">
        <i class="ph-light ph-sun"></i>
    </a>
</button>

	<div class="nav-link"><a id="controlsbutton" aria-label="hide/show tumblr controls" title="tumblr controls"><i class="ph-light ph-gear"></i></a></div>
	
</div>	

</div>

<!-- // NAVIGATION -->

</header>

<!-- // HEADER -->

<!-- FILTERS -->

<div class="filters">

  <div class="ui-group">
    <b>group</b> 
    <div class="button-group js-radio-button-group" data-filter-group="one">
      <button class="button is-checked" data-filter="">all</button>
      <button class="button" data-filter=".1">one</button>
      <button class="button" data-filter=".2">two</button>
      <button class="button" data-filter=".3">three</button>
    </div>
  </div>
  
  <div class="ui-group">
    <b>group</b>
    <div class="button-group js-radio-button-group" data-filter-group="two">
      <button class="button is-checked" data-filter="">all</button>
      <button class="button" data-filter=".4">one</button>
      <button class="button" data-filter=".5">two</button>
      <button class="button" data-filter=".6">three</button>
      <button class="button" data-filter=".7">four</button>
      <button class="button" data-filter=".8">five</button>
    </div>
  </div>

   <div class="ui-group">
    <b>group</b>
    <div class="button-group js-radio-button-group" data-filter-group="three">
      <button class="button is-checked" data-filter="">all</button>
      <button class="button" data-filter=".a">one</button>
      <button class="button" data-filter=".b">two</button>
      <button class="button" data-filter=".c">three</button>
      <button class="button" data-filter=".d">four</button>
    </div>
  </div>
  
  <div class="ui-group">
    <b>group</b>
    <div class="button-group js-radio-button-group" data-filter-group="four">
      <button class="button is-checked" data-filter="">all</button>
      <button class="button" data-filter=".e">one</button>
      <button class="button" data-filter=".f">two</button>
    </div>
  </div>
   

</div>

<!-- // FILTERS -->

<div id="container">

<!-- MUSES -->

<div id="grid">
<!--handlebars template set up. id can be whatever. note the type-->
 <script id="character-template" type="text/x-handlebars-template">
    <!--each makes it possible to repeat this for each sheet row-->
    {{#each []}}
    
<div class="grid-item {{this.filters}}">
		
	<div class="muse-info">
		<div class="muse-name"> {{{this.name}}} </div>
	</div>
	
	<div class="muse-box">
	
	    <div class="muse-img"> <img src="{{{this.image}}}"> </div>
	
	    <div class="muse-stats">
	    {{#if this.stat1}}
	        <div class="stat"><i class="ph-light ph-{{this.stat1icon}}"></i>{{{this.stat1}}}</div>
	    {{/if}}
	    {{#if this.stat2}}
	        <div class="stat"><i class="ph-light ph-{{this.stat2icon}}"></i><p> {{{this.stat2}}}</div>
	    {{/if}}
	    {{#if this.stat3}}
	        <div class="stat"><i class="ph-light ph-{{this.stat3icon}}"></i><p> {{{this.stat3}}}</div>
	    {{/if}}
	    {{#if this.stat4}}
	        <div class="stat"><i class="ph-light ph-{{this.stat4icon}}"></i><p> {{{this.stat4}}}</div>
	    {{/if}}
	    {{#if this.stat5}}
	        <div class="stat"><i class="ph-light ph-{{this.stat5icon}}"></i><p> {{{this.stat5}}}</div>
	    {{/if}}
	    {{#if this.stat6}}
	        <div class="stat"><i class="ph-light ph-{{this.stat6icon}}"></i><p> {{{this.stat6}}}</div>
	    {{/if}}
	    
	    {{#if this.description}}
	    <div class="muse-desc">{{{this.description}}}</div>
	    {{/if}}
	    
	    </div>
	    
	    
	
	</div>
		
	<div class="muse-links">
		<a href="{{this.link1}}" title="{{this.link1title}}"><i class="ph-light ph-{{this.link1icon}}"></i></a>
		<a href="{{this.link2}}" title="{{this.link2title}}"><i class="ph-light ph-{{this.link2icon}}"></i></a>
		<a href="{{this.link3}}" title="{{this.link3title}}"><i class="ph-light ph-{{this.link3icon}}"></i></a>
			
	</div>

</div>
	
	{{/each}}
	
</script>	 
	
<!-- END OF MUSES. DO NOT EDIT BELOW THIS LINE -->

</div>

<!-- // MUSES -->

</div>

<a id="totop" title="back to top"><i class="ph-light ph-caret-up"></i></a>

<!-- CREDIT. DO NOT EDIT -->

<a id="cred" href="https://codesbyana.tumblr.com/" title="codesbyana"><i class="ph-light ph-moon-stars"></i></a>

<!-- JAVASCRIPT -->

<!-- scroll to top -->

<script>

$(document).ready(function(){
// CONTROLS    
   $('#controlsbutton').click(function(){
       $('body').toggleClass('controls-click');
   });
    
// SCROLL TO TOP
    $('a#totop').click(function(){
        $('html, body').animate({scrollTop : 0},800);
        return false;
    });
});
 
</script>

<!-- GOOGLE SHEETS INTEGRATION  -->

<script>

  //TEMPLATE LIST
  //id + html selector
  var templateList = [
    ['#character-template', '#grid']
  ];
  
  const contentLoaded = function() {
      /*all functions and event handlers that interact or attach to the content you're generating from your spreadsheets needs to go in here. this includes grids like masonry/isotope filters and click events. scripts can't interact or change content that isn't yet generated!*/
      
      // TOOLTIPS

tippy('[title]', {
    theme: 'custom',
    arrow: false,
    followCursor: true,
    delay: 0,
    placement: 'top',
    zIndex: 9999999999,
    maxWidth: 400,
 
    content(reference) {
      const title = reference.getAttribute('title');
      reference.removeAttribute('title');
      return title;
    },
 });
 
    // DARK/LIGHT MODE
    
const modeBtns = document.querySelectorAll(".theme-toggle");

// For each element with the class "theme-toggle", add a click event listener.
modeBtns.forEach((btn) => {
    btn.addEventListener("click", function () {

        // lets retrive the info from data-theme
        const currentTheme = document.documentElement.getAttribute("data-theme");

        // Determine the target theme by toggling between "dark" and "light" based on the current theme.
        const targetTheme = currentTheme === "light" ? "dark" : "light";

        // Add the "theme-transition" class to the root (documentElement) to enable smooth transitions.
        document.documentElement.classList.add("theme-transition");

        // Set the "data-theme" attribute of the root to the target theme (dark or light).
        document.documentElement.setAttribute("data-theme", targetTheme);

        // Store the target theme in the local storage so that it persists across page reloads.
        localStorage.setItem("theme", targetTheme);

        // After a short delay (50ms), remove the "theme-transition" class to complete the transition.
        setTimeout(function () {
            document.documentElement.classList.remove("theme-transition");
        }, 50);
    });
});    
      
    // ISOTOPE FILTERING + SEARCH FILTER + MASONRY

 // store filter for each group
var buttonFilters = {};
var buttonFilter;
// quick search regex
var qsRegex;

// init Isotope
var $grid = $('#grid').isotope({
  itemSelector: '.grid-item',
  masonry: {
    gutter: 30, // in pixels
    horizontalOrder: true,
    fitWidth: true,
    percentPosition: false
    },
  filter: function() {
    var $this = $(this);
    var searchResult = qsRegex ? $this.text().match( qsRegex ) : true;
    var buttonResult = buttonFilter ? $this.is( buttonFilter ) : true;
    return searchResult && buttonResult;
  },
});

$('.filters').on( 'click', '.button', function() {
  var $this = $(this);
  // get group key
  var $buttonGroup = $this.parents('.button-group');
  var filterGroup = $buttonGroup.attr('data-filter-group');
  // set filter for group
  buttonFilters[ filterGroup ] = $this.attr('data-filter');
  // combine filters
  buttonFilter = concatValues( buttonFilters );
  // Isotope arrange
  $grid.isotope();
});

// use value of search field to filter
var $quicksearch = $('#searchbox').keyup( debounce( function() {
  qsRegex = new RegExp( $quicksearch.val(), 'gi' );
  $grid.isotope();
}) );

// change is-checked class on buttons
$('.button-group').each( function( i, buttonGroup ) {
  var $buttonGroup = $( buttonGroup );
  $buttonGroup.on( 'click', 'button', function() {
    $buttonGroup.find('.is-checked').removeClass('is-checked');
    $( this ).addClass('is-checked');
  });
});
  
// flatten object by concatting values
function concatValues( obj ) {
  var value = '';
  for ( var prop in obj ) {
    value += obj[ prop ];
  }
  return value;
}

// debounce so filtering doesn't happen every millisecond
function debounce( fn, threshold ) {
  var timeout;
  threshold = threshold || 250;
  return function debounced() {
    clearTimeout( timeout );
    var args = arguments;
    var _this = this;
    function delayed() {
      fn.apply( _this, args );
    }
    timeout = setTimeout( delayed, threshold );
  };
}
 
 
  }; // this one closes javascript
  
</script>

<!-- // JAVASCRIPT -->

</body>

</html>
